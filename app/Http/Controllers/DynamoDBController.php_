<?php
namespace App\Http\Controllers;

use Aws\DynamoDb\DynamoDbClient;
use Aws\DynamoDb\Exception\DynamoDbException;
use Aws\DynamoDb\Marshaler;

class DynamoDBController extends Controller
{
    protected $dynamoDb;

    public function __construct(DynamoDbClient $dynamoDb)
    {
        $this->dynamoDb = $dynamoDb;
    }

    public function index()
    {
        // Ví dụ truy vấn DynamoDB
        $result = $this->dynamoDb->scan([
            'TableName' => 'students',
        ]);

        return response()->json($result['Items']);
    }

    public function createTable()
    {
        $result = $this->dynamoDb->createTable([
            'TableName' => 'students',
            'KeySchema' => [
                [
                    'AttributeName' => 'id',
                    'KeyType' => 'HASH', // Partition key
                ],
            ],
            'AttributeDefinitions' => [
                [
                    'AttributeName' => 'id',
                    'AttributeType' => 'S', // S for String, N for Number, B for Binary
                ],
            ],
            'ProvisionedThroughput' => [
                'ReadCapacityUnits' => 5,
                'WriteCapacityUnits' => 5,
            ],
        ]);

        return response()->json($result);
    }

    public function updateItem()
    {
        $key = [
            'Item' => [
                'title' => [
                    'S' => $movieName,
                ],
                'year' => [
                    'N' => $movieYear,
                ],
            ],
        ];

        $this->dynamoDb->deleteItem([
            'Key' => $key['Item'],
            'TableName' => 'students',
        ]);
    }

    public function deleteItem()
    {
        $key = [
            'Item' => [
                'title' => [
                    'S' => $movieName,
                ],
                'year' => [
                    'N' => $movieYear,
                ],
            ],
        ];

        $this->dynamoDb->deleteItem([
            'Key' => $key['Item'],
            'TableName' => 'students',
        ]);
    }

    public function deleteTable()
    {

    }

    public function createMoviesTable()
    {
        $params = [
            'TableName' => 'Movies',
            'KeySchema' => [
                [
                    'AttributeName' => 'year',
                    'KeyType' => 'HASH', //Partition key
                ],
                [
                    'AttributeName' => 'title',
                    'KeyType' => 'RANGE', //Sort key
                ],
            ],
            'AttributeDefinitions' => [
                [
                    'AttributeName' => 'year',
                    'AttributeType' => 'N',
                ],
                [
                    'AttributeName' => 'title',
                    'AttributeType' => 'S',
                ],

            ],
            'ProvisionedThroughput' => [
                'ReadCapacityUnits' => 10,
                'WriteCapacityUnits' => 10,
            ],
        ];

        try {
            $result = $this->dynamoDb->createTable($params);
            echo 'Created table.  Status: ' .
                $result['TableDescription']['TableStatus'] . "\n";
        } catch (DynamoDbException $e) {
            echo "Unable to create table:\n";
            echo $e->getMessage() . "\n";
        }
    }

    public function deleteMoviesTable()
    {
        $params = [
            'TableName' => 'Movies',
        ];

        try {
            $result = $this->dynamoDb->deleteTable($params);
            echo "Deleted table.\n";
        } catch (DynamoDbException $e) {
            echo "Unable to delete table:\n";
            echo $e->getMessage() . "\n";
        }
    }

    public function putMovieItem()
    {
        $marshaler = new Marshaler();
        $tableName = 'Movies';

        $year = 2015;
        $title = 'The Big New Movie';

        $item = $marshaler->marshalJson('
            {
                "year": ' . $year . ',
                "title": "' . $title . '",
                "info": {
                    "plot": "Nothing happens at all.",
                    "rating": 0
                }
            }
        ');

        $params = [
            'TableName' => 'Movies',
            'Item' => $item,
        ];

        try {
            $result = $this->dynamoDb->putItem($params);
            echo "Added item: $year - $title\n";
        } catch (DynamoDbException $e) {
            echo "Unable to add item:\n";
            echo $e->getMessage() . "\n";
        }
    }

    public function getMovieItem()
    {
        $marshaler = new Marshaler();

        $tableName = 'Movies';

        $year = 2015;
        $title = 'The Big New Movie';

        $key = $marshaler->marshalJson('
            {
                "year": ' . $year . ',
                "title": "' . $title . '"
            }
        ');

        $params = [
            'TableName' => $tableName,
            'Key' => $key,
        ];

        try {
            $result = $this->dynamoDb->getItem($params);
            print_r($result["Item"]);
        } catch (DynamoDbException $e) {
            echo "Unable to get item:\n";
            echo $e->getMessage() . "\n";
        }
    }

    public function updateMovieItem()
    {
        $marshaler = new Marshaler();

        $tableName = 'Movies';

        $year = 2015;
        $title = 'The Big New Movie';

        $key = $marshaler->marshalJson('
            {
                "year": ' . $year . ',
                "title": "' . $title . '"
            }
        ');

        $eav = $marshaler->marshalJson('
            {
                ":r": 5.5 ,
                ":p": "Everything happens all at once.",
                ":a": [ "Larry", "Moe", "Curly" ]
            }
        ');

        $params = [
            'TableName' => $tableName,
            'Key' => $key,
            'UpdateExpression' =>
            'set info.rating = :r, info.plot=:p, info.actors=:a',
            'ExpressionAttributeValues' => $eav,
            'ReturnValues' => 'UPDATED_NEW',
        ];

        try {
            $result = $this->dynamoBb->updateItem($params);
            echo "Updated item.\n";
            print_r($result['Attributes']);
        } catch (DynamoDbException $e) {
            echo "Unable to update item:\n";
            echo $e->getMessage() . "\n";
        }
    }

    public function updateMovieItem2()
    {
        $marshaler = new Marshaler();

        $tableName = 'Movies';

        $year = 2015;
        $title = 'The Big New Movie';

        $key = $marshaler->marshalJson('
            {
                "year": ' . $year . ',
                "title": "' . $title . '"
            }
        ');

        $eav = $marshaler->marshalJson('
            {
                ":val": 1
            }
        ');

        $params = [
            'TableName' => $tableName,
            'Key' => $key,
            'UpdateExpression' => 'set info.rating = info.rating + :val',
            'ExpressionAttributeValues' => $eav,
            'ReturnValues' => 'UPDATED_NEW',
        ];

        try {
            $result = $this->dynamoBb->updateItem($params);
            echo "Updated item.\n";
            print_r($result['Attributes']);
        } catch (DynamoDbException $e) {
            echo "Unable to update item:\n";
            echo $e->getMessage() . "\n";
        }
    }

    public function updateMovieItem3()
    {
        $marshaler = new Marshaler();

        $tableName = 'Movies';

        $year = 2015;
        $title = 'The Big New Movie';

        $key = $marshaler->marshalJson('
            {
                "year": ' . $year . ',
                "title": "' . $title . '"
            }
        ');

        $eav = $marshaler->marshalJson('
            {
                ":num": 3
            }
        ');

        $params = [
            'TableName' => $tableName,
            'Key' => $key,
            'UpdateExpression' => 'remove info.actors[0]',
            'ConditionExpression' => 'size(info.actors) > :num',
            'ExpressionAttributeValues' => $eav,
            'ReturnValues' => 'UPDATED_NEW',
        ];

        try {
            $result = $this->dynamoBb->updateItem($params);
            echo "Updated item.\n";
            print_r($result['Attributes']);
        } catch (DynamoDbException $e) {
            echo "Unable to update item:\n";
            echo $e->getMessage() . "\n";
        }
    }

    public function deleteMovieItem()
    {
        $marshaler = new Marshaler();

        $tableName = 'Movies';

        $year = 2015;
        $title = 'The Big New Movie';

        $key = $marshaler->marshalJson('
            {
                "year": ' . $year . ',
                "title": "' . $title . '"
            }
        ');

        $eav = $marshaler->marshalJson('
            {
                ":val": 5
            }
        ');

        $params = [
            'TableName' => $tableName,
            'Key' => $key,
            'ConditionExpression' => 'info.rating <= :val',
            'ExpressionAttributeValues' => $eav,
        ];

        try {
            $result = $this->dynamoBb->deleteItem($params);
            echo "Deleted item.\n";
        } catch (DynamoDbException $e) {
            echo "Unable to delete item:\n";
            echo $e->getMessage() . "\n";
        }
    }

    public function query1()
    {
        $marshaler = new Marshaler();

        $tableName = 'Movies';

        $eav = $marshaler->marshalJson('
            {
                ":yyyy": 1985
            }
        ');

        $params = [
            'TableName' => $tableName,
            'KeyConditionExpression' => '#yr = :yyyy',
            'ExpressionAttributeNames' => ['#yr' => 'year'],
            'ExpressionAttributeValues' => $eav,
        ];

        echo "Querying for movies from 1985.\n";

        try {
            $result = $this->dynamoBb->query($params);

            echo "Query succeeded.\n";

            foreach ($result['Items'] as $movie) {
                echo $marshaler->unmarshalValue($movie['year']) . ': ' .
                $marshaler->unmarshalValue($movie['title']) . "\n";
            }
        } catch (DynamoDbException $e) {
            echo "Unable to query:\n";
            echo $e->getMessage() . "\n";
        }
    }

    public function query2()
    {
        $marshaler = new Marshaler();

        $tableName = 'Movies';

        $eav = $marshaler->marshalJson('
            {
                ":yyyy":1992,
                ":letter1": "A",
                ":letter2": "L"
            }
        ');

        $params = [
            'TableName' => $tableName,
            'ProjectionExpression' => '#yr, title, info.genres, info.actors[0]',
            'KeyConditionExpression' =>
            '#yr = :yyyy and title between :letter1 and :letter2',
            'ExpressionAttributeNames' => ['#yr' => 'year'],
            'ExpressionAttributeValues' => $eav,
        ];

        echo "Querying for movies from 1992 - titles A-L, with genres and lead actor\n";

        try {
            $result = $this->dynamoBb->query($params);

            echo "Query succeeded.\n";

            foreach ($result['Items'] as $i) {
                $movie = $marshaler->unmarshalItem($i);
                print $movie['year'] . ': ' . $movie['title'] . ' ... ';

                foreach ($movie['info']['genres'] as $gen) {
                    print $gen . ' ';
                }

                echo ' ... ' . $movie['info']['actors'][0] . "\n";
            }
        } catch (DynamoDbException $e) {
            echo "Unable to query:\n";
            echo $e->getMessage() . "\n";
        }
    }

    public function scan()
    {
        $marshaler = new Marshaler();

        //Expression attribute values
        $eav = $marshaler->marshalJson('
            {
                ":start_yr": 1950,
                ":end_yr": 1959
            }
        ');

        $params = [
            'TableName' => 'Movies',
            'ProjectionExpression' => '#yr, title, info.rating',
            'FilterExpression' => '#yr between :start_yr and :end_yr',
            'ExpressionAttributeNames' => ['#yr' => 'year'],
            'ExpressionAttributeValues' => $eav,
        ];

        echo "Scanning Movies table.\n";

        try {
            while (true) {
                $result = $this->dynamoBb->scan($params);

                foreach ($result['Items'] as $i) {
                    $movie = $marshaler->unmarshalItem($i);
                    echo $movie['year'] . ': ' . $movie['title'];
                    echo ' ... ' . $movie['info']['rating']
                        . "\n";
                }

                if (isset($result['LastEvaluatedKey'])) {
                    $params['ExclusiveStartKey'] = $result['LastEvaluatedKey'];
                } else {
                    break;
                }
            }
        } catch (DynamoDbException $e) {
            echo "Unable to scan:\n";
            echo $e->getMessage() . "\n";
        }
    }
}

//https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/dynamodb/GettingStarted/MoviesItemOps04.php
